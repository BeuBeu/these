\documentclass[a4paper,10pt]{llncs}
\usepackage[latin1]{inputenc}
\usepackage[english]{babel}
\usepackage{stmaryrd}
\usepackage{amsmath, amssymb, amsfonts}
\usepackage{bussproofs}
\input{rapinclude}

\begin{document}
\title{Tree Automata Completion Checker}

\author{Benoît Boyer \and Thomas Genet \and Thomas Jensen}

\institute{
  IRISA / Universit\'e de Rennes\,1 / CNRS \\
  Campus de Beaulieu \\
  F-35042 Rennes Cedex \\
  {\tt {bboyer,genet,jensen}@irisa.fr} 
}
\maketitle


\begin{abstract}
Youpi
\end{abstract}

\section{Introduction}

\section{Preliminaries}
\label{section:preliminaries}


Comprehensive surveys can be found in~\cite{DershowitzJ-89,BaaderN-book98} for
term rewriting systems, and in~\cite{TATA,GilleronTison-FI95} for tree automata
and tree language theory.

Let $\F$ be a finite set of symbols, each associated with an arity function, and
let $\X$ be a countable set of variables. $\TFX$ denotes the set of terms, and
$\TF$ denotes the set of ground terms (terms without variables). The set of
variables of a term $t$ is denoted by $\var(t)$. A substitution is a function
$\sigma$ from $\X$ into $\TFX$, which can be extended uniquely to an
endomorphism of $\TFX$. A position $p$ for a term $t$ is a word over $\NN$. The
empty sequence $\epsilon$ denotes the top-most position. The set $\pos(t)$ of
positions of a term $t$ is inductively defined by:
\begin{itemize}
\item $\pos(t)= \{ \epsilon\} $ if $t \in \X$
\item $\pos(f(t_1,\dots,t_n)) = \{ \epsilon \} \cup \{i.p \mid 1 \leq i \leq n
  \et p \in \pos(t_i) \}$
\end{itemize}
If $p \in \pos(t)$, then $t|_p$ denotes the subterm of $t$ at position $p$ and
$t[s]_p$ denotes the term obtained by replacement of the subterm $t|_p$ at
position $p$ by the term $s$. A term rewriting system $\R$ is a set of {\em
  rewrite rules} $l \rw r$, where $l, r \in \TFX$, $l \not \in \X$, and $\var(l)
\supseteq \var(r)$. A rewrite rule $l \rw r$ is {\em left-linear} if each
variable of $l$ (resp. $r$) occurs only once in $l$.  A TRS $\R$ is left-linear
if every rewrite rule $l \rw r$ of $\R$ is left-linear).  The TRS $\R$ induces a
rewriting relation $\rw_{\R}$ on terms whose reflexive transitive closure is
denoted by $\rw^{\star}_{\R}$. The set of $\R$-descendants of a set of ground
terms $E$ is $\desc(E) = \{t \in \TF \sep \exists s \in E \st s \rw^{\star}_{\R}
t \}$.

The verification technique we propose in this paper is based on the computation
of $\desc(E)$.  Note that $\desc(E)$ is possibly infinite:
$\R$ may not terminate and/or $E$ may be infinite. The set $\desc(E)$
is generally not computable~\cite{GilleronTison-FI95}. However, it is possible
to over-approximate it~\cite{FeuilladeGVTT-JAR04,Takai-RTA04} using tree
automata, i.e. a finite representation of infinite (regular) sets of terms. We
next define tree automata.

Let $\Q$ be a finite set of symbols, with arity $0$, called {\em states} such
that $\Q \cap \F= \emptyset$.  $\TFQ$ is called the set of {\em configurations}.
\begin{definition}[Transition and normalized transition]
  \label{def:normalized}
  A {\em transition} is a rewrite rule $c \f q$, where $c$ is a configuration
  i.e. $c \in \TFQ$ and $q \in \Q$. A {\em normalized transition} is a
  transition $c \f q$ where $c = f(q_1, \ldots, q_n)$, $f \in \F$ whose arity is
  $n$, and $q_1, \ldots, q_n \in \Q$.
\end{definition}

% An epsilon transition is a transition of the form $q \f q'$ where $q$ and $q'$
% are states. Any set of transition $\Delta \cup \{q \f q'\}$ can be
% equivalently replaced by $\Delta \cup \{c \f q' \sep c \f q \in \Delta \}$.

\begin{definition}[Bottom-up non-deterministic finite tree automaton]
  A bottom-up non-deterministic finite tree automaton (tree automaton for short)
  is a quadruple $\A= \langle \F, \Q, \Q_f,\Delta \rangle$, where $\Q_f
  \subseteq \Q$ and $\Delta$ is a set of normalized transitions.
\end{definition}

The {\em rewriting relation} on $\TFQ$ induced by the transitions of $\A$ (the
set $\Delta$) is denoted by $\f_{\Delta}$.  When $\Delta$ is clear from the
context, $\f_{\Delta}$ will also be denoted by $\f_{\A}$.
% Similarly, by notation abuse, we will often note $q \in \A$ and $t\f q \in \A$
% respectively for $q \in \Q$ and $t \f q \in \Delta$.

\begin{definition}[Recognized language]
  The tree language recognized by $\A$ in a state $q$ is $\Lang(\A,q) = \{t \in
  \TF \sep t \f^{\star}_{\A} q \}$.  The language recognized by $\A$ is
  $\Lang(\A) = \bigcup_{q \in \Q_f} \Lang(\A, q)$. A tree language is regular if
  and only if it can be recognized by a tree automaton.
  % A state $q$ is a {\em dead state} if $\Lang(\A, q)= \emptyset$.
\end{definition}


% \begin{example}
%   Let $\A$ be the tree automaton $\langle \F, \Q, \Q_f, \Delta \rangle$ such
%   that $\F=\{f,g,a\}$, $\Q= \{q_0, q_1\}$, $\Q_f=\{q_0\}$ and $\Delta= \{f(q_0)
%   \f q_0, g(q_1) \f q_0, a \f q_1 \}$. In $\Delta$ transitions are {\em
%     normalized}. A transition of the form $f(g(q_1)) \f q_0$ is not
%   normalized. The term $g(a)$ is a term of $\TFQ$ (and of $\TF$) and can be
%   rewritten by $\Delta$ in the following way: $g(a) \f_{\Delta} g(q_1)
%   \f_{\Delta} q_0$. Note that $\Lang(\A, q_1)= \{a\}$ and $\Lang(\A)=\Lang(\A,
%   q_0) = \{g(a),f(g(a)), f(f(g(a))),\ldots\}=\{f^{\star}(g(a))\}$.
%   % Note also that $\Lang(\A, q_2)=\emptyset$ since no term of $\TF$ rewrites to
%   % $q_2$, hence $q_2$ is a dead state.
% \end{example}


\section{Completion}
\label{section:completion}

Given a tree automaton $\A$ and a TRS $\R$, the tree automata completion
algorithm, proposed in~\cite{Genet-RTA98,FeuilladeGVTT-JAR04}, computes a tree
automaton $\aaex^k$ such that $\Lang(\aaex^k)=\desc(\Lang(\A))$ when it is
possible (for the classes of TRSs where an exact computation is possible,
see~\cite{FeuilladeGVTT-JAR04}) and such that $\Lang(\aaex^k) \supseteq
\desc(\Lang(\A))$ otherwise.

The tree automata completion works as follows. From $\A=\aaex^0$ completion
builds a sequence $\aaex^0.\aaex^1\ldots\aaex^k$ of automata such that if
$s\in\Lang(\aaex^i)$ and $s\f_{\R} t$ then $t\in\Lang(\aaex^{i+1})$. If we find
a fixpoint automaton $\aaex^k$ such that $\desc(\Lang(\aaex^k)) =
\Lang(\aaex^k)$, then we have $\Lang(\aaex^k)=\desc(\Lang(\aaex^0))$ (or
$\Lang(\aaex^k)\supseteq \desc(\Lang(\A))$ if $\R$ is not in one class
of~\cite{FeuilladeGVTT-JAR04}). To build $\aaex^{i+1}$ from $\aaex^{i}$, we
achieve a \textit{completion step} which consists of finding \textit{critical
  pairs} between $\f_{\R}$ and $\f_{\aaex^i}$. To define the notion of critical
pair, we extend the definition of substitutions to terms of $\TFQ$. For a
substitution $\sigma:\X\mapsto\Q$ and a rule $l\f r \in \R$, a critical pair is
an instance $l\sigma $ of $l$ such that there exists $q\in\Q$ satisfying
$l\sigma \f^*_{\aaex^i}q$ and $l\sigma \f_{\R} r\sigma$. Note that since $\R$,
$\aaex^i$ and the set $\Q$ of states of $\aaex^i$ are finite, there is only a
finite number of critical pairs.  For every critical pair detected between $\R$
and $\aaex^i$ such that $r\sigma \not\f^*_{\aaex^i}q$, the tree automaton
$\aaex^{i+1}$ is constructed by adding a new transition $r\sigma \f q$ to
$\aaex^i$ such that $\aaex^{i+1}$ recognizes $r\sigma$ in $q$, i.e. $r\sigma
\f_{\aaex^{i+1}} q$.

\medskip \centerline{FIGURE HERE!}

\noindent
However, the transition $r \sigma \f q$ is not necessarily a normalized
transition of the form $f(q_1, \ldots, q_n) \f q$ and so it has to be normalized
first.  
Since normalization consists in associating state symbols to subterms of the
left-hand side of the new transition, it always succeed. Note that, when using
new states to normalize the transitions, completion is as precise as possible.
However, without approximation, completion is likely not to terminate (because
of general undecidability results~\cite{GilleronTison-FI95}). To enforce
termination, and produce an over-approximation, the completion algorithm is
parametrized by a set $\nr$ of {\em approximation rules}. When the set $\nr$ is
used during completion to normalize transitions, the obtained tree automata are
denoted by $\aapprox^1, \ldots, \aapprox^{k}$. Each such rule describes a
context in which a list of rules can be used to normalize a term. For all
$s,l_1, \ldots, l_n \in\TFQX$ and for all $x,x_1, \ldots, x_n \in \Q\cup\X$, the
general form for an approximation rule is:
\[[s \rw x] \rw [l_1 \rw x_1, \ldots, l_n \rw x_n].\] The expression $[s \rw x]$
is a pattern to be matched with the new transitions $t \rw q'$ obtained by
completion. The expression $ [l_1 \rw x_1, \ldots, l_n \rw x_n]$ is a set of
rules used to normalize $t$. To normalize a transition of the form $t \rw q'$,
we match $s$ with $t$ and $x$ with $q'$, obtain a substitution $\sigma$ from the
matching and then we normalize $t$ with the rewrite system $\{l_1\sigma \rw
x_1\sigma, \ldots, l_n \sigma \rw x_n\sigma\}$. Furthermore, if $\forall
i=1\ldots n: x_i\in \Q$ or $x_i \in \var(l_i) \cup \var(s) \cup \{x\}$ then
since $\sigma: \X \mapsto \Q$, $x_1
\sigma, \ldots, x_n\sigma$ are necessarily states. If a transition cannot be
fully normalized using approximation rules $\nr$, normalization is finished
using some new states, see Example \ref{example:approx}.

The main property of the tree automata completion algorithm is that, whatever
the state labels used to normalize the new transitions, if completion terminates
then it produces an over-approximation of reachable
terms~\cite{FeuilladeGVTT-JAR04}. 
% In other words, approximation safety does not
% depend on the set of approximation rules used. Since the role of approximation
% rules is only to select particular states for normalizing transitions, the
% safety theorem of~\cite{FeuilladeGVTT-JAR04} can be reformulated in the
% following way.
\begin{theorem}[\cite{FeuilladeGVTT-JAR04}]
  \label{safety}
  Let $\R$ be a left-linear TRS, $\A$ be a tree automaton and $\nr$ be a set of
  approximation rules. If completion terminates on $\aapprox^k$ then
$$\Lang(\aapprox^k)\supseteq \desc(\Lang(\A))$$
\end{theorem}

Here is a simple example illustrating completion and the use of approximation
rules when the language $\desc(E) $ is not regular.
\begin{example}
  \label{example:approx}
  Let $\R=\{g(x,y) \rw g(f(x),f(y))\} $ and let $\A$ be the tree automaton such
  that $\Q_f=\{q_f\}$ and $\Delta=\{a \rw q_a, g(q_a,q_a)\rw q_f\}$. Hence
  $\Lang(\A)= \{g(a,a)\}$ and $\desc(\Lang(\A))=\{g(f^n(a),f^n(a))~|~n\geq 0\}$. Let
  $\nr=[g(f(x),f(y)) \rw z] \rw [f(x) \rw q_1, f(y) \rw q_1]$. During the first
  completion step, we find a critical pair $g(q_a, q_a) \rwR g(f(q_a),f(q_a))$
  and $g(q_a,q_a)\rw^*_{\A} q_f$. We thus have to add the transition
  $g(f(q_a),f(q_a)) \rw q_f$ to $\A$. To normalize this transition, we match
  $g(f(x), f(y))$ with $g(f(q_a),f(q_a))$ and match $z$ with $q_f$ and obtain
  $\sigma=\{x \mapsto q_a, y \mapsto q_a, z \mapsto q_f\}$. Applying $\sigma$ to
  $[f(x) \rw q_1, f(y) \rw q_1]$ gives $[f(q_a) \rw q_1, f(q_a) \rw q_1]$. This
  last system is used to normalize the transition $g(f(q_a),f(q_a)) \rw q_f$
  into the set $\{g(q_1, q_1) \rw q_f, f(q_a)\rw q_1 \}$ which is added to $\A$
  to obtain $\aapprox^1$. The completion process continues for another step and
  ends on $\aapprox^2$ whose set of transition is $\{a \rw q_a, g(q_a,q_a)\rw
  q_f, g(q_1, q_1) \rw q_f, f(q_a)\rw q_1, f(q_1)\rw q_1\}$. We have
  $\Lang(\aapprox^k)=\{g(f^n(a),f^m(a))~|~n,m\geq 0\}$ which is an
  over-approximation of $\desc(\Lang(\A))$.
\end{example}

The tree automata completion algorithm and the approximation mechanism are
implemented in the Timbuk~\cite{Timbuk-site} tool. On the previous example, once
the fixpoint automaton $\aapprox^k$ has been computed, it is possible to check
whether some terms are reachable, i.e. recognized by $\aapprox^k$ or not. This
can be done using tree automata 
intersections~\cite{FeuilladeGVTT-JAR04}. Another way to do
that is to search instances for a pattern $t$, where $t\in \TFX$, in the tree
automaton. 
Given $t$ it is possible to check if there exists
a substitution $\sigma: \X \mapsto \Q$ and a state $q \in \Q$ such that $t\sigma
\rw_{\aapprox^k}^* q$. If such a solution exists then it proves that there
exists a term $s\in\TF$, a position $p \in \pos(s)$ and a substitution $\sigma':
\X \mapsto \TF$ such that $s[t\sigma']_p \in \Lang(\aapprox^k) \supseteq
\desc(\Lang(\A))$, i.e. that $t\sigma'$ occurs as a subterm in the language
recognized by $\Lang(\aapprox^k)$. On the other hand, if there is no solution
then it proves that no such term is in the over-approximation, hence it is not
in $\desc(\Lang(\A))$, i.e. it is not reachable.

In the patterns we use in this paper, '$?x$' denotes variables for which a value
is wanted and '$\_$' denotes anonymous variables for which no value is needed.
For instance, the pattern $g(f(\_), g(\_,\_))$ has no solution on 
$\aapprox^{2}$ of example~\ref{example:approx}, meaning that no term
containing any ground instance of this pattern is reachable by rewriting $g(a,a)$.

\section{A certified checker}
\label{sec:intro_checker}

The main question about \timbuk results is \emph{how can we trust in it?}
For example if the tree automata completion outputs an incorrect fixpoint automaton,
analysis process may validate unsafe programs as good. Certification with the proof assistant 
\coq is a way to avoid it.
The principle is based on intuisionnitic logic implemented Coq that allows
program extraction program in regard with Curry-Howard isomorphism.
From a proof of the good formulated correctness property (a theorem), Coq generates
trusted source code.\\

With this approach the formal verification consist of stating the correctness property.
In our case, we obtain something like
\emph{"Given a tree automaton $\A$ a TRS $\R$ the tree automata completion
  algorithm computes a fixpoint tree automaton $\aaex^*$ such that $\desc(\Lang(\A))\subseteq \Lang(\aaex^k)$"}.

% Presenter les problemes de la méthode....
% problèmes algorithmiques
% (terminaison, compléxité preuves algorithmes, approches fonctionnelles....)
% passage à quelque chose de + PCC : checker...

% This technique presents


\subsection{Formalization}
\label{sec:formalization}

Given two automata $\A$, $\B$ and a TRS $\R$ the checker need verify $\B$ is on over-approximation
of post-fixpoint $\R^*(\A)$. This verification may be performed in two steps :
\begin{itemize}
\item $\A \subseteq \B$ : inclusion of initial set
\item $\R(\B) \subseteq \B$ : closure by rewriting with $\R$
\end{itemize}
Then the initial property can be seen as two individual properties to verify.

\subsection{Inclusion checking}
% Quel est l'interet de redéfinir un algo d'inclusion...

\label{sec:def_inclusion}
We certify a simple decision procedure to decide tree automata inclusion.
In fact this algorithm checks only transition function inclusion 
(closed to renaming) that implies trivially language inclusion.
In general case the procedure is not complete, but here we have hypothesis about tree automata completion
that ensures completeness. You will find the proof in \cite{completeness}.\\

We prefer use this simpler version of inclusion checking which is sufficient in our case and which is 
not so hard to implement in \coq.

First we introduce some usefull notations for the following :
\begin{center}
  \begin{tabular}[c]{lcp{12cm}}
    $\Gamma$    & : & induction hypothesis set\\
    $\Delta_i$  & : & transition function of the tree automaton $\mathcal{A}_i$\\
    $\{c|c \rightarrow q \in \Delta\}$ & : & configurations of $\Delta$ that are rewritten in $q$\\
    $\{c_i\}_n^m$ & : & configuration set from $n$ to $m$\\
    $\emptyset$ & : & empty set of configurations\\
    $[q_1, \dots, q_n]$ & : & a tuple of $n$ states\\
  \end{tabular}
\end{center}

We formulate one instance of our inclusion problem by a statement of the form :
\[{\Gamma \vdash_{A, B} q \unlhd q'}\]

To build a derivation we will use the following set of rules :

\[\textrm{(Unfold) }
\dfrac{
  \Gamma \cup \{q \unlhd q'\} \vdash_{A, B}
  \{c|c \rightarrow_{\Delta_A} q\} \unlhd \{c|c \rightarrow q'\in \Delta_B\}
}{
  \Gamma \vdash_{A, B} q \unlhd q'
}\textrm{if }(q \unlhd q') \notin \Gamma
\]

\[\textrm{(Axiom) }
\dfrac{}{
  \Gamma \cup \{q \unlhd q'\} \vdash_{A, B} q \unlhd q'
}\]

\[\textrm{(Split-l) }
\dfrac {
  \Gamma \vdash_{A, B} c_1 \unlhd \{c'_i\}^m_1 \quad
  \Gamma \vdash_{A, B}  \{c_i\}^n_2 \unlhd \{c'_i\}^m_1
}{
  \Gamma \vdash_{A, B} \{c_i\}^n_1 \unlhd \{c'_i\}^m_1
}\]

\[\textrm{(Empty) }
\dfrac{}{
  \Gamma \vdash_{A, B} \emptyset \unlhd \{c'_j\}^m_1
}\]

\[\textrm{(Weak-r) }
\dfrac{
  \Gamma \vdash_{A, B} c \unlhd c'_k
}{
  \Gamma \vdash_{A, B} c \unlhd \{c'_i\}^n_1
}\textrm{ if }(1 \le k \le n)\]

\[\textrm{(Config) }
\dfrac{
  \Gamma \vdash_{A, B} [q_1, \dots, q_n] \unlhd [q'_1, \dots, q'_n]
}{
  \Gamma \vdash_{A, B} f(q_1, \dots, q_n) \unlhd f(q'_1, \dots, q'_n)
}\]

\[\textrm{(Tuple) }
\dfrac{
  \Gamma \vdash_{A, B} q_1 \unlhd q'_1 \quad
  \Gamma \vdash_{A, B}  [q_2, \dots, q_n] \unlhd [q'_2, \dots, q'_n]
}{
  \Gamma \vdash_{A, B} [q_1, \dots, q_n] \unlhd [q'_1, \dots, q'_n]
}\]

\[\textrm{(Nil) }
\dfrac {} {\Gamma \vdash_{A, B} [\ ] \unlhd [\ ]}
\]


Considering the problem $\Lang(\A) \subseteq \Lang(\B)$, we have just to consider final state sets as particular case
of configuration set (each configuration is a simple state) and to derive the statement :
\[\dfrac
{\vdots}
{\emptyset \vdash_{\Delta, \Delta'} \mathcal{Q}_F \unlhd \mathcal{Q}'_F}
\]

\paragraph{About the correctness :} Is it trivial to prove it??? {\Large To Developp...}

\paragraph{Remark:}
To obtain a complet algorithm the "Split-r" rule must be modified; this version does not care all possible cases
for union construction:

\begin{example}
  Let $\Delta$ and $\Delta'$ be two transition functions such that :
  \[\Delta = \left\{ 
    \begin{array}{lcl}
      a& \rightarrow &q_1\\
      b& \rightarrow &q_2\\
      c& \rightarrow &q_2\\
      f(q_1, q_2)&\rightarrow &q\\
    \end{array}\right\}
  \textrm { and }
  \Delta' = \left\{ 
    \begin{array}{lcl}
      a& \rightarrow &q_1'\\
      b& \rightarrow &q_2'\\
      c& \rightarrow &q_3'\\
      f(q_1', q_2')&\rightarrow &q'\\
      f(q_1', q_3')&\rightarrow &q'\\
    \end{array}\right\}
  \]
  Here we have $\Lang(\Delta, q) = \Lang(\Delta', q')$ but 
  $\emptyset \vdash_{\Delta', \Delta} q' \unlhd q$ is clearly derivable
  whereas $\emptyset \vdash_{\Delta, \Delta'} q \unlhd q'$ is not.
\end{example}
\subsubsection{Termination}
\label{sec:termination}
Termination of rules can be proved easily by defining a measure function $\mu$.
We use the finiteness property of $\Gamma$ that is finite and the size of terms on the right of $\vdash$.
$\Gamma$ can be seen as a subset of $\mathcal{Q}_A \times \mathcal{Q}_B$ which is a finite set by definition : all tree automaton has 
a finite number of states $|\cal{Q}|$.
Then the statement measure $\mu({\Gamma \vdash_{A, B} \alpha \unlhd \beta})$ is defined as tuple $(\mu_1(\Gamma), \mu_2(\alpha)+\mu_2(\beta), \mu_3(\alpha))$
where : 
\[\left[
  \begin{array}{lcl}
    \mu_1(\Gamma) & = & | \Q_A \times \Q_B | - |\Gamma|\\
    \mu_2(x) &=&
    \left\{\begin{array}{l}
        (m+1-n) \textrm{ if } x = \{c_i\}^m_n\\
        0 \textrm{ else}
      \end{array}\right.\\
    \mu_3(x) &=& 
    \left\{
      \begin{array}{l}
        n \textrm{ if } x = [q_{i_1}, ..., q_{i_n}]\\
        0 \textrm{ else}\\
      \end{array}\right.\\
  \end{array}\right.
\]

Then we define the ordering $\ll$ by the lexicographic combination of the usual 
order $<$ on natural numbers for $\mu_1$, $\mu_2$ and $\mu_3$ :
\[(x, y, z) \ll (x', y', z') \Longleftrightarrow
\bigvee
\begin{array}{l}
  x < x' \\
  x = x' \land y < y'\\
  x = x' \land y = y' \land z < z'
\end{array}
\]
Since $<$ is well founded then the lexicographic combination $\ll$ is also well founded.
\begin{theorem}
  At each deduction step, the measure decreases strictly :
  \[
  \dfrac{
    \Gamma \vdash_{A, B} \alpha \unlhd \beta
  }{
    \Gamma' \vdash_{A, B} \alpha' \unlhd \beta'
  }
  \Longrightarrow \mu({\Gamma \vdash_{A, B} \alpha \unlhd \beta}) \ll \mu({\Gamma' \vdash_{A, B} \alpha' \unlhd \beta'})
  \]
\end{theorem}

\begin{proof}
  The following array summarizes for each derivation rule what composant of the tuple
  prooves that $\mu$ decreases between conclusion and premisses of the rule:

  \[\begin{array}[h]{l|c|c|c|}
    \footnotesize
    & \mu_1 & \mu_2 & \mu_3\\ \hline
    \textrm{Unfold}   & \strut \mu_1(\Gamma) < \mu_1(\Gamma') & - & -\\ \hline
    \textrm{Split-l} & \mu_1(\Gamma) = \mu_1(\Gamma') & 
    \begin{array}{l}
      \mu_2(c_1) = 1 < \mu_2(\{c_i\}_1^n)\\
      \mu_2((\{c_i\}_2^n) < \mu_2(\{c_i\}_1^n)\\
    \end{array} & -\\ \hline

    \textrm{Weak-r} & \mu_1(\Gamma) = \mu_1(\Gamma') & \mu_2(c_k) < \mu_2(\{c_i\}_1^n)& -\\ \hline
    \textrm{Config} & \mu_1(\Gamma) = \mu_1(\Gamma') & 0 < 2 & -\\ \hline
    \textrm{Tuple} & \mu_1(\Gamma) = \mu_1(\Gamma') & 0 = 0 &
    \begin{array}{l}
      \mu_3([q_1, \dots, q_n]) > \mu_3(q1)\\
      \mu_3([q_1, \dots, q_n]) > \mu_3([q_2, \dots, q_n])\\
    \end{array}\\ \hline


\end{array} \]
For the Split-l (resp. Weak-r) rule, we consider $n > 1$ to have a set $\alpha = \{c_i\}_1^n$ (resp. $\beta$) with
at less two elements else ($n = 1$) apply rule is not required for the current statement
${\Gamma \vdash \alpha \unlhd \beta}$.\\

\end{proof}

\begin{theorem}
  When $\mu(\Gamma \vdash_{A, B} \alpha \unlhd \beta) = (0, 0, 0)$, we have a statement as Axiom or Nil :
  proof is completed.
\end{theorem}
\begin{proof}
  From  $\mu(\Gamma \vdash_{A, B} \alpha \unlhd \beta) = (0, 0, 0)$ we deduce immediately :
  \begin{enumerate}
  \item $\mu_1(\Gamma) = 0$ implies $\Gamma = \Q_A \times \Q_B$ 
  \item $\mu_2(\alpha) = \mu_2(\beta) = 0$ implies $\alpha$ and $\beta$ are both either a state tuple or a state or empty set.
  \item $\mu_3(\alpha) = 0$ implies $\alpha$ and $\beta$ are both either an empty tuple or a state or a state set.
  \item By combining 2 and 3 we deduce $\alpha$ and $\beta$ are both either an empty tuple or state or empty set.
  \end{enumerate}
  Thus the statement may be :
  \begin{itemize}
  \item $\Gamma \vdash_{A, B} [] \unlhd []$ : we are in the case of Nil rule : proof is ended.
  \item $\Gamma \vdash_{A, B} \emptyset \unlhd \emptyset$ is the case of Empty rule : proof is ended.
  \item $\Gamma \vdash_{A, B} q \unlhd q'$ : we can use the fact $\Gamma = \Q_A \times \Q_B$, thus $(q, q') \in \Q_A\times\Q_B \imp (q \unlhd q') \in \Gamma$. This case matches
    with Axiom rule that terminates the proof.
  \end{itemize}
\end{proof}

\subsubsection{Completness}
\label{sec:completude}
In this part tree automaton produced by the $k$ steps of completion is noted 
$\mathcal{A}_k = \langle \mathcal{F}, \mathcal{Q}_k, \mathcal{Q}_{F_k}, \Delta_k\rangle$.\\
As said above, the described algorithm is not complet for general case, but 
in our context, tree automata produced by completion have a property that ensures we 
can build a proof $\prod$ for the statement  $\forall k$, $\Gamma \vdash_{\A_0, \A_k} \mathcal{Q}_{F_0} \unlhd \mathcal{Q}_{F_k}$.

First let us introduce a new definition about transition function inclusion.
\begin{definition}
  let $\A$, $\B$ be two tree automata.\\
  We say $\A \sqsubseteq \B$ if there exists a function
  that renames states of $\A$ into states of $\B$ and such that 
  all renamed rules $\Delta_\A$ are contained in $\Delta_\B$:
  
  \begin{equation}
    \label{prop0}
    \A \sqsubseteq \B \Longleftrightarrow
    \exists \varrho : \mathcal{Q_\A} \rightarrow \mathcal{Q_\B},
    \ \varrho(\Delta_\A) \subseteq \Delta_\B
  \end{equation}
  
  $\sqsubseteq$ is reflexive and transitive.
\end{definition}
Here and below, we use abusive notations for recursive renaming of all state occurrences
that appear in different structures or sets used in the following:
\begin{itemize}
\item $\varrho(\{q_i\}_1^n)$ stands for $\{\varrho(q_i)\}_1^n$

\item $\varrho(c) = \left\{\begin{array}{ll}
      f (\varrho(c_1, \dots, c_n) &\textrm{ if } c = f(c_1, \dots, c_n)\\
      c &\textrm{ if } c \in \cal{F}_0\\
      \varrho(q) &\textrm{ if } c \cal{Q}\\
    \end{array}\right.$

\item $\varrho(c \rightarrow q)$ stands for $\varrho(c) \rightarrow \varrho(q)$


\item $\varrho(\Delta)$ stands for $\{ \varrho(c\rightarrow q)\}$ for each rule $c \rightarrow q$ of $\Delta$.
\end{itemize}


In tree automata completion algorithm two main operations are performed at each steps of calculus :
\emph{normalization} and \emph{state merging}. Two following points show that after the $k^{th}$ step of
completion, we obtain a tree automaton $\A_k$ from $\A_{k-1}$ such that $\A_{k-1} \sqsubseteq \A_{k}$.
\begin{lemma}
  Normalization and state merging ensure 
  \[
  \begin{array}{llll}
    1. & \A' = \textrm{Normalization}(\A, \_, \_, \dots)& \imp &\A \sqsubseteq \A' \\
    2. & \A' = \textrm{Merging}(\A, \mathcal{E}) &\imp& \A \sqsubseteq \A'  \\
  \end{array}
  \]
\end{lemma}

\begin{proof}
  \begin{enumerate}
  \item
    In \cite{UN PAPIER}, a proof are stated for 
    $\A' = \textrm{Normalization}(\A, \_, \_, \dots) \imp \Delta_A \subseteq \Delta_{\A'}$.\\
    Then by taking $\varrho = id$, we have immediatly the conclusion $\A \sqsubseteq \A'$.

  \item 
    For merging some states in a transition function $\Delta_\A$ from a term equation system $\mathcal{E}$, 
    algorithm deduces $\mathcal{E}'$ a state equation system like $ \{q_i = q_j, \dots, q_k = q_l\}$ 
    that explicitly says which states have to be merged to a unique identifier. 
    We can define and apply to $\Delta_\A$ an equivalent renaming function $\varrho$ which has
    the same behavior than state merging in regard with $\mathcal{E}'$:
    \[
    \varrho = \left\{
    \begin{array}{c}
      q_i \rightarrow q_j\\
      q_j \rightarrow q_j\\
      \vdots\\
      q_k \rightarrow q_k\\
      q_l \rightarrow q_k\\
    \end{array}\right.
    \]
    
    So state merging build $\Delta_{\A'} = \varrho(\Delta_\A)$ and by definition \cite{prop0} we have trivially $\Delta_A \sqsubseteq \Delta_{\A'}$.
  \end{enumerate}
\end{proof}

\begin{theorem}
  Given a tree automaton $\mathcal{A}_0$, a TRS $\mathcal{T}$ and an equation set $\mathcal{E}$, after $k$ completion steps 
  we obtain $\mathcal{A}_k$ such that $\A_0 \sqsubseteq \A_k$.
\end{theorem}

\begin{proof}
  By induction on $k$ :
  
  \begin{itemize}
  \item Since $\sqsubseteq$ is reflexive, we have trivially $\A_0 \sqsubseteq \A_0$.
  \item Let $\mathcal{A}_k$ be a tree automaton obtained after $k$ completion steps such that $\A_0 \sqsubseteq \A_k$:\\
    let us apply one more step of completion. After normalization of $\A_k$ we have $\A_k \sqsubseteq \A'$; then we merge $\A'$
    with set $\mathcal{E}$ to obtain $\A' \sqsubseteq \A_{k+1}$. By transitivity of $\sqsubseteq$ we deduce immediately that
    $\A_k \sqsubseteq \A_{k+1}$.
  \end{itemize}
\end{proof}

\begin{theorem}
  Given two tree automata $\A$ and $\B$ if $\A \sqsubseteq \B$ then it exists $\prod$ a proof of statement 
  $\emptyset \vdash_{\A, \B} \mathcal{Q}_{F_A} \unlhd \mathcal{Q}_{F_B}$.
\end{theorem}

\begin{proof}
  From hypothesis $\Delta_\A \sqsubseteq \Delta_\B$ we can deduce an existing $\varrho$ by definition.\\
  First we prove by induction on proof tree we have for all $\Gamma$ and $q$, 
  $\Gamma \vdash_{\A, \B} q \unlhd \varrho(q)$:\\
  The hypothesis induction is 
  $\forall \Gamma,\ q,\ q_i,$ 
  \begin{prooftree}
    \AxiomC{$\prod_i$}
    \UnaryInfC{$\Gamma \cup \{q \unlhd \varrho(q)\} \vdash_{\A, \B} q_i \unlhd \varrho(q_i)$}
  \end{prooftree}

  We want to construct a proof tree for $\Gamma \vdash_{\A, \B} q \unlhd \varrho (q)$.\\
  Two cases are possible:
  \begin{itemize}
  \item 
    if $q \unlhd \varrho(q) \in \Gamma$ then we can conclude immediatelly :
    \begin{prooftree}
      \AxiomC{}
      \LeftLabel{(Axiom)}
      \UnaryInfC{$\Gamma' \cup  \{q \unlhd \varrho(q)\} \vdash_{\A, \B} q \unlhd \varrho(q)$}
    \end{prooftree}

  \item 
    Otherwise, we need to apply Unfold rule to obtain the following tree :
  
    \newcommand{\env}{\Gamma \cup \{q \unlhd \varrho(q)\} \vdash_{\A, \B}}
    {\tiny
      \begin{prooftree}
        \AxiomC{\small $\prod_{c_1}$}
        \UnaryInfC{$\env 
          c_1 \unlhd  \{c_i'| c_i' \rightarrow \varrho(q)\}_1^m$}
        % Pointillets du milieu
        \AxiomC{\small \dots\dots}
        \AxiomC{\small $\prod_{c_n}$}
        \UnaryInfC{$\env
          c_n \unlhd  \{c_i'| c_i' \rightarrow \varrho(q)\}_1^m$}
        \doubleLine
        \LeftLabel{($n \times$ Split-l)}
        \TrinaryInfC{$\env
          \{c_i| c_i \rightarrow q\}_1^n \unlhd  \{c_i'| c_i'\rightarrow \varrho(q)\}_1^m$}
        \LeftLabel{(Unfold)}
        \UnaryInfC{$\Gamma \vdash_{\A, \B} q \unlhd \varrho(q)$}
      \end{prooftree}
    }
    From hypothesis $\varrho(\Delta_A) \subseteq \Delta_B$ for each rule $c \rightarrow q$ of $\Delta_A$, we have $\varrho(c \rightarrow q) \in \Delta_\B$.
    \[\textrm{Thus for all } (c\rightarrow q)\in \Delta_\A,\textrm{ we have } \varrho(c) \in \{c_i' | c_i' \rightarrow \varrho(q)\}_1^m \]
    Now, for each $c_i$ we can construct the corresponding tree $\prod_{c_i}$ which his each branch is concluded by  $\prod_{i_j}$ an instance of induction hypothesis 
    for the corresponding state $q_{i_j}$:
    {\tiny
      \begin{prooftree}
        % \AxiomC{$f_1 = f_1$}
        \AxiomC{\small $\prod_{i_1}$}
        \UnaryInfC{$\env q_{i_1} \unlhd \varrho(q_{i_1}) $}
        \AxiomC{\small \dots\dots}
        \AxiomC{\small $\prod_{i_n}$}
        \UnaryInfC{$\env q_{i_n} \unlhd \varrho(q_{i_n}) $}
        %%%%%%%%%%%%%%%%%%%%%%% 
        \doubleLine
        \LeftLabel{$n \times$ (n-tuple)}
        \TrinaryInfC{$\env [q_{i_1}, \dots, q_{i_n}] \unlhd [\varrho(q_{i_1}), \dots, \varrho(q_{i_n})]$}
        \LeftLabel{(Config)}
        \UnaryInfC{$\env c_1 \unlhd  \varrho(c_1) $}
        \LeftLabel{(Weak-r)}
        \UnaryInfC{$\env c_1 \unlhd  \{c_i'| c_i' \rightarrow \varrho(q)\}_1^m$}
      \end{prooftree}
    }
  \end{itemize}

  Now we have for all $\Gamma$ and $q \in \Q_\A$ there exists a proof tree $\prod_q$ for all statement $\Gamma \vdash_{\A, \B} q \unlhd \varrho(q)$.\\
  In particular, this is true for $\Gamma = \emptyset$ all $q$ of $\Q_{F_\A}$. 
  Since we have $\A \sqsubseteq \B \imp \varrho(\Q_{F_\A}) \subseteq \Q_{F_\B}$, we can build a proof tree as :

  \begin{prooftree}
  
  \AxiomC{$\prod_{q_{f_1}}$}
  \UnaryInfC{$\emptyset \vdash_{\A, \B} q_{f_1} \unlhd \varrho(q_{f_1})$}
  \LeftLabel{(Weak-r)}
  \UnaryInfC{$\emptyset \vdash_{\A, \B} q_{f_1} \unlhd \Q_{F_\B}$}
  \AxiomC{\small \dots\dots}
  \AxiomC{$\prod_{q_{f_n}}$}
  \UnaryInfC{$\emptyset \vdash_{\A, \B} q_{f_n} \unlhd \varrho(q_{f_n})$}
  \RightLabel{(Weak-r)}
  \UnaryInfC{$\emptyset \vdash_{\A, \B} q_{f_n} \unlhd \Q_{F_\B}$}
  \LeftLabel{$n \times$ (split-l)}
  \doubleLine
  \TrinaryInfC{$\emptyset \vdash_{\A, \B} \Q_{F_\A} \unlhd \Q_{F_\B}$}
\end{prooftree}


\end{proof}



\section{Further research}

\bibliographystyle{alpha}
\bibliography{sabbrev,eureca,genet}
.
\end{document}
