%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 82 37 491 142
%%Creator: Adobe Illustrator(TM) 3.2
%%For: (FLORENCE) (L\325ATELIER DU CLAN)
%%Title: (Logo INRIA couleur)
%%CreationDate: (12/11/92) (11:41)
%%BoundingBox: 78 33 493 144
%%BoundingBox: -117 -49 705 322
%%DocumentProcessColors: Cyan Magenta Black
%%DocumentSuppliedResources: procset Adobe_packedarray 2.0 0
%%+ procset Adobe_cmykcolor 1.1 0
%%+ procset Adobe_cshow 1.1 0
%%+ procset Adobe_customcolor 1.0 0
%%+ procset Adobe_typography_AI3 1.0 1
%%+ procset Adobe_IllustratorA_AI3 1.0 1
%AI3_ColorUsage: Color
%%CMYKCustomColor: 0 0 0 1 (Couleur perso. 0)
%%+ 0 0 0 1 (Couleur perso. 1)
%%+ 0 0 0 0 (Couleur perso. 2)
%%+ 0 0 0 0 (Couleur perso. 3)
%AI3_TemplateBox: 297 50 297 50
%AI3_TileBox: -123.5 -239 717.5 339
%AI3_DocumentPreview: Macintosh_ColorPic
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_packedarray 2.0 0
%%Title: (Packed Array Operators)
%%Version: 2.0 
%%CreationDate: (8/2/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_packedarray 5 dict dup begin put
/initialize			% - initialize -
{
/packedarray where
	{
	pop
	}
	{
	Adobe_packedarray begin
	Adobe_packedarray
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/packedarray		% arguments count packedarray array
{
array astore readonly
} def
/setpacking			% boolean setpacking -
{
pop
} def
/currentpacking		% - setpacking boolean
{
false
} def
currentdict readonly pop end
%%EndResource
Adobe_packedarray /initialize get exec
%%BeginResource: procset Adobe_cmykcolor 1.1 0
%%Title: (CMYK Color Operators)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cmykcolor 4 dict dup begin put
/initialize			% - initialize -
{
/setcmykcolor where
	{
	pop
	}
	{
	userdict /Adobe_cmykcolor_vars 2 dict dup begin put
	/_setrgbcolor
		/setrgbcolor load def
	/_currentrgbcolor
		/currentrgbcolor load def
	Adobe_cmykcolor begin
	Adobe_cmykcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	end
	Adobe_cmykcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_cmykcolor eq
	{
	end
	} if
} def
/setcmykcolor		% cyan magenta yellow black setcmykcolor -
{
1 sub 4 1 roll
3
	{
	3 index add neg dup 0 lt
		{
		pop 0
		} if
	3 1 roll
	} repeat
Adobe_cmykcolor_vars /_setrgbcolor get exec
pop
} def 
/currentcmykcolor	% - currentcmykcolor cyan magenta yellow black
{
Adobe_cmykcolor_vars /_currentrgbcolor get exec
3
	{
	1 sub neg 3 1 roll
	} repeat
0
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 1.1 0
%%Title: (cshow Operator)
%%Version: 1.1 
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 3 dict dup begin put
/initialize			% - initialize -
{
/cshow where
	{
	pop
	}
	{
	userdict /Adobe_cshow_vars 1 dict dup begin put
	/_cshow		% - _cshow proc
		{} def
	Adobe_cshow begin
	Adobe_cshow
		{
		dup xcheck
			{
			bind
			} if
		userdict 3 1 roll put
		} forall
	end
	end
	} ifelse
} def
/terminate			% - terminate -
{
} def
/cshow				% proc string cshow -
{
exch
Adobe_cshow_vars
	exch /_cshow
	exch put
	{
	0 0 Adobe_cshow_vars /_cshow get exec
	} forall
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_customcolor 1.0 0
%%Title: (Custom Color Operators)
%%Version: 1.0 
%%CreationDate: (5/9/88) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_customcolor 5 dict dup begin put
/initialize			% - initialize -
{
/setcustomcolor where
	{
	pop
	}
	{
	Adobe_customcolor begin
	Adobe_customcolor
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_customcolor begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_customcolor eq
	{
	end
	} if
} def
/findcmykcustomcolor	% cyan magenta yellow black name findcmykcustomcolor object
{
5 packedarray
}  def
/setcustomcolor		% object tint setcustomcolor -
{
exch
aload pop pop
4
	{
	4 index mul 4 1 roll
	} repeat
5 -1 roll pop
setcmykcolor
} def
/setoverprint		% boolean setoverprint -
{
pop
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI3 1.1 0
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(5/31/90) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI3 47 dict dup begin put
/initialize			% - initialize -
{
/TZ
 where
	{
	pop
	}
	{
	Adobe_typography_AI3 begin
	Adobe_typography_AI3
		{
		dup xcheck
			{
			bind
			} if
		pop pop
		} forall
	end
	Adobe_typography_AI3 begin
	} ifelse
} def
/terminate			% - terminate -
{
currentdict Adobe_typography_AI3 eq
	{
	end
	} if
} def
% [ number value stream [ array for encoding modification ] modifyEncoding ==> [ modified array ]
/modifyEncoding
{
	/_tempEncode exch ddef
	
	% pointer for sequential encodings
	/_pntr 0 ddef
	
	{
		% get bottom object
		counttomark -1 roll
		% is it a mark ?
		dup type dup /marktype eq 		
		{
			% exit
			pop pop exit
		}
		{
			% ... object ... type ....
			% insert if a nametype
			/nametype eq
			{
				% insert the name at _pntr and increment pointer
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				% reset _pntr if it's a number
				/_pntr exch ddef					
			}
			ifelse
		}
		ifelse
	}
	loop	
	
	% return the modified encoding
	_tempEncode
}
def
/TE	% Set std platform encoding 	% (encoding pairs) TE -
{
	StandardEncoding 256 array copy modifyEncoding 
	/_nativeEncoding exch def
} def
% re-define font
% expected arguments
% for 'normal fonts : 
% [ /_Helvetica-Bold/Helvetica-Bold direction fontScript defaultEncoding TZ
%
% for cartographic, pictographic, and expert fonts :
% [ ... number value stream ... /_Symbol/Symbol 
%	direction fontScript defaultEncoding TZ
% for blended fonts w/ default encoding :
% [ /_AdobeSans_20ULig1XCond-Bold/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
% for blended fonts w/ special encoding :
% [ ... number value stream ... /_AdobeSans_20ULig1XCond/AdobeSans 
%	direction fontScript defaultEncoding [ w0 w1 ... wn ] TZ
/TZ		
{
	% set weight vector (if present)
	dup type /arraytype eq {/_wv exch def} {/_wv 0 def} ifelse 
	% platform dependent coding flag
	/_useNativeEncoding exch def
	% pop fontScript & direction
	pop pop
	
	% create a new dictionary with length
	% equal to original dictionary length + 2
	% copy all the key/value pairs except FID
	% call makeblended font with the weight values if _wv is an array
	findfont _wv type /arraytype eq {_wv makeblendedfont} if dup length 2 add dict
	
	begin
	
		% copy all the values but the FID
		% into the new dictionary
		mark exch
		{
			1 index /FID ne { def } if cleartomark mark
		}
		forall
		% discard last mark
		pop
		
		% define FontName
		/FontName exch def
		
		% if no re-encoding stream is present
		% then if the base encoding vector of the font
		% is the same as StandardEncoding
		% and the use platform encoding flag is true
		% then install AI platform encoding
		% else leave the base encoding in effect
		counttomark 0 eq
		{
			1 _useNativeEncoding eq
			{
				/Encoding _nativeEncoding def
			}
			if
			% clean up
			cleartomark
		}
		{	
			% custom encoding to be done
			% start off with a copy of the font's standard encoding
			/Encoding load 256 array copy 
			modifyEncoding /Encoding exch def
		}
		ifelse		
		FontName currentdict
	end
	
	% register the new font
	definefont pop
}
def
% text painting operators
/tr					% string tr ax ay string 
{
_ax _ay 3 2 roll
} def
/trj				% string trj cx cy fillchar ax ay string 
{
_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
/Tx	% text							% textString Tx -
	{
	dup 
	currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup
	currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	} ddef
	
} def
/a1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	tr _psf
	newpath moveto
	tr _ctm _pss
	grestore 3 1 roll moveto tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave
	dup currentpoint 3 2 roll
	trj _pjsf
	newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp
	} ddef
	
} def
/e0
{
/Tx	% text							% textString Tx -
	{
	tr _psf
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _pjsf
	} ddef
} def
/e1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll gsave 
	tr _psf  
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll gsave 
	trj _pjsf
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
/i0
{
/Tx	% text							% textString Tx -
	{
	tr sp
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj jsp
	} ddef
} def
/i1
{
W N
} def
/o0
{
/Tx	% text							% textString Tx -
	{
	tr sw rmoveto
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj swj rmoveto
	} ddef
} def
/r0
{
/Tx	% text							% textString Tx -
	{
	tr _ctm _pss
	} ddef
/Tj	% justified text				% textString Tj -
	{
	trj _ctm _pjss
	} ddef
} def
/r1
{
/Tx	% text							% textString Tx -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	tr _ctm _pss 
	grestore 3 1 roll moveto tr sp 
	} ddef
/Tj	% justified text				% textString Tj -
	{
	dup currentpoint 4 2 roll currentpoint gsave newpath moveto
	trj _ctm _pjss
	grestore 3 1 roll moveto tr sp 
	} ddef
} def
% font operators
% Binding
/To	% begin text 					% bindType To -
{
	pop _ctm currentmatrix pop
} def
/TO	% end text					% TO -
{
	Te _ctm setmatrix newpath
} def
% Text paths
/Tp	% begin text path				% a b c d tx ty startPt Tp -
{
	pop _tm astore pop _ctm setmatrix 
	_tDict begin /W {} def /h {} def
} def
/TP	% end text path					% TP -
{
	end
	iTm 0 0 moveto
} def
% Render mode & matrix operators
/Tr	% begin render					% render Tr - 
{
	_render 3 le {currentpoint newpath moveto} if
	dup 8 eq {pop 0} {dup 9 eq {pop 1} if} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm % internal set text matrix		% - iTm -	(uses _tm as implicit argument)
{
_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm % set text matrix				% a b c d tx ty Tm -
{
_tm astore pop iTm 0 0 moveto
} def
/Td % translate text matrix 		% tx ty Td -
{
_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/Te	% end render					% - Te -
{
	_render -1 eq {} {_renderEnd _render get dup null ne {load exec} {pop} ifelse} ifelse
	/_render -1 ddef
} def
% Attributes
/Ta	% set alignment					% alignment Ta -
{
pop
} def
/Tf	% set font name and size		% fontname size Tf -
{
dup 1000 div /_fScl exch ddef
exch findfont exch scalefont setfont
} def
/Tl	% set leading					% leading paragraphLeading Tl -
{
pop
0 exch _leading astore pop
} def
/Tt	% set user tracking				% userTracking Tt -
{
pop
} def
/TW % set word spacing				% minSpace optSpace maxSpace TW -
{
3 npop
} def
/Tw	% set computed word spacing		% wordSpace Tw
{
/_cx exch ddef
} def
/TC % set character spacing			% minSpace optSpace maxSpace TC -
{
3 npop
} def
/Tc	% set computed char spacing 	% charSpace Tc -
{
/_ax exch ddef
} def
/Ts % set super/subscripting (rise)	% rise Ts -
{
/_rise exch ddef
currentpoint
iTm
moveto
} def
/Ti	% set indentation				% firstStartIndent otherStartIndent stopIndent Ti -
{
3 npop
} def
/Tz % set horizontal scaling		% scalePercent Tz -
{
100 div /_hs exch ddef
iTm
} def
/TA % set pairwise kerning			% autoKern TA -
									%	autoKern = 0 -> no pair kerning
									%			 = 1 -> automatic pair kerning
{
pop
} def
/Tq % set hanging quotes			% hangingQuotes Tq -
									%	hangingQuotes 	= 0 -> no hanging quotes
									%			 		= 1 -> hanging quotes
{
pop
} def
% Text Bodies
/TX {pop} def
%/Tx	% non-justified text			% textString Tx -
%/Tj	% justified text				% textString Tj -
/Tk	% kern							% autoKern kernValue Tk -
									%  	autoKern = 0 -> manual kern, = 1 -> auto kern
									%	kernValue = kern value in em/1000 space
{
exch pop _fScl mul neg 0 rmoveto
} def
/TK	% non-printing kern				% autoKern kernValue TK -
{
2 npop
} def
/T* % carriage return & line feed	% - T* -
{
_leading aload pop neg Td
} def
/T*- % carriage return & negative line feed	% - T*- -
{
_leading aload pop Td
} def
/T-	% print a discretionary hyphen	% - T- -
{
_hyphen Tx
} def
/T+	% discretionary hyphen hyphen	% - T+ -
{} def
/TR	% reset pattern matrix 			% a b c d tx ty TR -
{
_ctm currentmatrix pop 	
_tm astore pop 
iTm 0 0 moveto 
} def
/TS	% special chars					% textString justified TS -
{
0 eq {Tx} {Tj} ifelse
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_IllustratorA_AI3 1.0 2
%%Title: (Adobe Illustrator (R) Version 3.0 Abbreviated Prolog)
%%Version: 1.0 
%%CreationDate: (7/22/89) ()
%%Copyright: ((C) 1987-1990 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_IllustratorA_AI3 61 dict dup begin put
% initialization
/initialize				% - initialize -
{
% 47 vars, but leave slack of 10 entries for custom Postscript fragments
userdict /Adobe_IllustratorA_AI3_vars 57 dict dup begin put
% paint operands
/_lp /none def
/_pf {} def
/_ps {} def
/_psf {} def
/_pss {} def
/_pjsf {} def
/_pjss {} def
/_pola 0 def
/_doClip 0 def
% paint operators
/cf	currentflat def	% - cf flatness
% typography operands
/_tm matrix def
/_renderStart [/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def 
/_renderEnd [null null null null /i1 /i1 /i1 /i1] def
/_render -1 def
/_rise 0 def
/_ax 0 def			% x character spacing	(_ax, _ay, _cx, _cy follows awidthshow naming convention)
/_ay 0 def			% y character spacing
/_cx 0 def			% x word spacing
/_cy 0 def			% y word spacing
/_leading [0 0] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
% typography operators
/Tx {} def
/Tj {} def
% compound path operators
/CRender {} def
% printing
/_AI3_savepage {} def
% color operands
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc {} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc {} def
/_i null def
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3
	{
	dup xcheck
		{
		bind
		} if
	pop pop
	} forall
end
end
Adobe_IllustratorA_AI3 begin
Adobe_IllustratorA_AI3_vars begin
newpath
} def
/terminate				% - terminate -
{
end
end
} def
% definition operators
/_					% - _ null
null def
/ddef				% key value ddef -
{
Adobe_IllustratorA_AI3_vars 3 1 roll put
} def
/xput				% key value literal xput -
{
dup load dup length exch maxlength eq
	{
	dup dup load dup
	length 2 mul dict copy def
	} if
load begin def end
} def
/npop				% integer npop -
{
	{
	pop
	} repeat
} def
% marking operators
/sw					% ax ay string sw x y 
{
dup length exch stringwidth
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add
} def
/swj				% cx cy fillchar ax ay string swj x y
{
dup 4 1 roll
dup length exch stringwidth 
exch 5 -1 roll 3 index 1 sub mul add
4 1 roll 3 1 roll 1 sub mul add 
6 2 roll /_cnt 0 ddef
{1 index eq {/_cnt _cnt 1 add ddef} if} forall pop
exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss					% ax ay string matrix ss -
{
4 1 roll
	{				% matrix ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put pop
	gsave
	false charpath currentpoint
	4 index setmatrix
	stroke
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
3 npop
} def
/jss				% cx cy fillchar ax ay string matrix jss -
{
4 1 roll
	{				% cx cy fillchar matrix ax ay char 0 0 {proc} -   
	2 npop 
	(0) exch 2 copy 0 exch put 
	gsave
	_sp eq 
		{
		exch 6 index 6 index 6 index 5 -1 roll widthshow  
		currentpoint
		}
		{
		false charpath currentpoint
		4 index setmatrix stroke
		}ifelse
	grestore
	moveto
	2 copy rmoveto
	} exch cshow
6 npop
} def
% path operators
/sp					% ax ay string sp -
{
	{
	2 npop (0) exch
	2 copy 0 exch put pop
	false charpath
	2 copy rmoveto
	} exch cshow
2 npop
} def
/jsp					% cx cy fillchar ax ay string jsp -
{
	{					% cx cy fillchar ax ay char 0 0 {proc} -
	2 npop 
	(0) exch 2 copy 0 exch put 
	_sp eq 
		{
		exch 5 index 5 index 5 index 5 -1 roll widthshow  
		}
		{
		false charpath
		}ifelse
	2 copy rmoveto
	} exch cshow
5 npop
} def
% path construction operators
/pl				% x y pl x y
{
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} def
/setstrokeadjust where
	{
	pop true setstrokeadjust
	/c				% x1 y1 x2 y2 x3 y3 c -
	{
	curveto
	} def
	/C
	/c load def
	/v				% x2 y2 x3 y3 v -
	{
	currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y				% x1 y1 x2 y2 y -
	{
	2 copy curveto
	} def
	/Y
	/y load def
	/l				% x y l -
	{
	lineto
	} def
	/L
	/l load def
	/m				% x y m -
	{
	moveto
	} def
	}
	{%else
	/c
	{
	pl curveto
	} def
	/C
	/c load def
	/v
	{
	currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
	pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
	pl lineto
	} def
	/L
	/l load def
	/m
	{
	pl moveto
	} def
	}ifelse
% graphic state operators
/d					% array phase d -
{
setdash
} def
/cf	{} def			% - cf flatness
/i					% flatness i -
{
dup 0 eq
	{
	pop cf
	} if
setflat
} def
/j					% linejoin j -
{
setlinejoin
} def
/J					% linecap J -
{
setlinecap
} def
/M					% miterlimit M -
{
setmiterlimit
} def
/w					% linewidth w -
{
setlinewidth
} def
% path painting operators
/H					% - H -
{} def
/h					% - h -
{
closepath
} def
/N					% - N -
{
_pola 0 eq 
	{
	_doClip 1 eq {clip /_doClip 0 ddef} if 
	newpath
	} 
	{
	/CRender {N} ddef
	}ifelse
} def
/n					% - n -
{N} def
/F					% - F -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _pf grestore clip newpath /_lp /none ddef _fc 
		/_doClip 0 ddef
		}
		{
		_pf
		}ifelse
	} 
	{
	/CRender {F} ddef
	}ifelse
} def
/f					% - f -
{
closepath
F
} def
/S					% - S -
{
_pola 0 eq 
	{
	_doClip 1 eq 
		{
		gsave _ps grestore clip newpath /_lp /none ddef _sc 
		/_doClip 0 ddef
		}
		{
		_ps
		}ifelse
	} 
	{
	/CRender {S} ddef
	}ifelse
} def
/s					% - s -
{
closepath
S
} def
/B					% - B -
{
_pola 0 eq 
	{
	_doClip 1 eq 	% F clears _doClip
	gsave F grestore 
		{
		gsave S grestore clip newpath /_lp /none ddef _sc
		/_doClip 0 ddef
		} 
		{
		S
		}ifelse
	}
	{
	/CRender {B} ddef
	}ifelse
} def
/b					% - b -
{
closepath
B
} def
/W					% - W -
{
/_doClip 1 ddef
} def
/*					% - [string] * -
{
count 0 ne 
	{
	dup type (stringtype) eq {pop} if
	} if 
_pola 0 eq {newpath} if
} def
% group operators
/u					% - u -
{} def
/U					% - U -
{} def
/q					% - q -
{
_pola 0 eq {gsave} if
} def
/Q					% - Q -
{
_pola 0 eq {grestore} if
} def
/*u					% - *u -
{
_pola 1 add /_pola exch ddef
} def
/*U					% - *U -
{
_pola 1 sub /_pola exch ddef 
_pola 0 eq {CRender} if
} def
/D					% polarized D -
{pop} def
/*w					% - *w -
{} def
/*W					% - *W -
{} def
% place operators
/`					% matrix llx lly urx ury string ` -
{
/_i save ddef
6 1 roll 4 npop
concat pop
userdict begin
/showpage {} def
0 setgray
0 setlinecap
1 setlinewidth
0 setlinejoin
10 setmiterlimit
[] 0 setdash
newpath
0 setgray
false setoverprint
} def
/~					% - ~ -
{
end
_i restore
} def
% color operators
/O					% flag O -
{
0 ne
/_of exch ddef
/_lp /none ddef
} def
/R					% flag R -
{
0 ne
/_os exch ddef
/_lp /none ddef
} def
/g					% gray g -
{
/_gf exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_gf setgray
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/G					% gray G -
{
/_gs exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_gs setgray
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/k					% cyan magenta yellow black k -
{
_cf astore pop
/_fc
{
_lp /fill ne
	{
	_of setoverprint
	_cf aload pop setcmykcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/K					% cyan magenta yellow black K -
{
_cs astore pop
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_cs aload pop setcmykcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
/x					% cyan magenta yellow black name gray x -
{
/_gf exch ddef
findcmykcustomcolor
/_if exch ddef
/_fc
{ 
_lp /fill ne
	{
	_of setoverprint
	_if _gf 1 exch sub setcustomcolor
	/_lp /fill ddef
	} if
} ddef
/_pf
{
_fc
fill
} ddef
/_psf
{
_fc
ashow
} ddef
/_pjsf
{
_fc
awidthshow
} ddef
/_lp /none ddef
} def
/X					% cyan magenta yellow black name gray X -
{
/_gs exch ddef
findcmykcustomcolor
/_is exch ddef
/_sc
{
_lp /stroke ne
	{
	_os setoverprint
	_is _gs 1 exch sub setcustomcolor
	/_lp /stroke ddef
	} if
} ddef
/_ps
{
_sc
stroke
} ddef
/_pss
{
_sc
ss
} ddef
/_pjss
{
_sc
jss
} ddef
/_lp /none ddef
} def
% locked object operator
/A					% value A -
{
pop
} def
currentdict readonly pop end
setpacking
% annotate page operator
/annotatepage
{
} def
%%EndResource
%%%%BD: decalage dans la page et diminution de la taille (pour ghostview)
[0.5 0 0 0.5 140 60] concat
%%EndProlog
%%BeginSetup
%%IncludeFont: Times-Roman
Adobe_cmykcolor /initialize get exec
Adobe_cshow /initialize get exec
Adobe_customcolor /initialize get exec
Adobe_typography_AI3 /initialize get exec
Adobe_IllustratorA_AI3 /initialize get exec
%%EndSetup
0 A
0 i 0 J 0 j 1 w 4 M []0 d
%AI3_Note:
0 D
-351 0 m
945 0 L
(N) *
u
u
0 O
0 g
154.877 84.25 m
155.625 86 155.125 89.75 149.627 90 C
150.252 92 L
182.502 92 L
181.752 90 L
177.8582 89.7775 175.125 88 173.502 84.25 C
173.625 84.25 152.7841 7.8703 152.75 7.75 c
151.5625 3.5625 155.125 1.625 157.6875 2 C
157.625 2 157.25 0 y
125.0469 0 l
125.75 2 l
128.25 2 132.375 4 133.875 7.5 c
154.8125 84.1875 l
F
332.9 92 m
309.9 92 L
309.4 90 l
310.775 90 l
309.4 90 L
310.775 90 L
F
309.9 92 m
334 92 l
333.25 90 l
332 90 l
329.125 89.625 326.375 88.375 325.125 84.25 C
302.8125 2.6875 L
302.3547 -0.0592 299.65 0 Y
291.875 0 l
250 70.5 249.9375 70.8125 v
232.9472 11.0036 232.75 7.75 v
232.5 3.625 234.75 2 238.625 2 C
238.25 0 l
214.25 0 213.9375 0.125 v
214.7764 2 214.5 2 v
217 2 221.5 4 222.25 7.75 c
242.75 83.25 L
243.25 87.125 240.0555 90 236.125 90 C
236.775 92 L
253.3125 92 L
255.8212 91.7909 257.6096 92.4039 261.15 85.75 C
298.2871 23.875 L
314.9 84.25 L
315.5 88.125 312.6703 90 310.775 90 c
F
677.5 7.75 m
677.625 3.25 674.625 2 672 2 C
671.5 0 L
702.5 0 L
703.1208 2 L
697.375 2 696.875 5.625 696 7.75 C
681.5 89 L
680.875 91.625 678 92 676.125 92 C
658.125 92 l
657.5 90 L
660.5 90 663 87.625 660.75 84.25 C
606.243 7.75 l
604.368 5.875 602.1477 2.4515 595.375 2 C
594.625 0 L
619.5 0 L
620.2259 2 L
618.8259 1.6 615.8125 4.0625 618.4432 7.75 C
618.4405 7.75 636.5 32.875 Y
654.875 32.875 l
657.75 32.875 662.375 32.875 665.2292 31.25 c
671.6731 40.2644 l
677.5 7.75 L
f
1 g
671.4375 41.625 m
F
671.6875 40 m
F
671.425 41.625 m
642.8125 41.625 L
665.7133 73.746 L
665.75 73.625 671.4125 41.625 671.425 41.625 c
f
0 g
544.877 84.25 m
545.625 86 545.125 89.75 539.627 90 C
540.252 92 L
572.502 92 L
571.752 90 L
567.8582 89.7775 565.125 88 563.502 84.25 C
563.625 84.25 542.7841 7.8703 542.75 7.75 c
541.5625 3.5625 545.125 1.625 547.6875 2 C
547.625 2 547.25 0 y
515.0469 0 l
515.75 2 l
518.25 2 522.375 4 523.875 7.5 c
544.8125 84.1875 l
F
447 92 m
390.625 91.975 L
390 89.975 L
393.875 90 395.875 87.125 395.0583 84.25 C
374.125 7.6 L
372.6875 4.375 371 2 366.125 1.975 C
365.625 -0.025 L
397.5 -0.025 L
398 2.1 L
397 2.1 L
394.375 2.875 392.125 4.875 393.0625 7.975 C
414.125 84.225 L
438 84.2 438 84.225 V
445.75 84.375 449.85 77.1 449.25 72.1 C
449.25 63.875 444.125 56.25 436.75 53.85 C
428.5 50.75 416.875 51.625 411.125 53.25 C
408 49.1 L
414 43.5 418.25 38.625 424.875 28.25 C
436.875 7.75 456 -6.175 477 -5.9 C
482.0625 -5.625 488.986 -5.5608 491.8125 0.375 c
492.4375 1.6875 490.8125 0.75 491.25 1.0375 C
466.25 -1.75 462.5 8 447.5 28.5 C
442.75 35.75 437.75 43.25 434.625 44.475 C
444.25 46.5 454.25 49 462 57.1 C
468.75 65.375 470.5 73.25 467 81.1 C
460.625 93.5 448.75 91.625 447 92 c
F
U
U
948 698 m
948 -598 L
(N) *
842 698 m
842 -598 L
(N) *
-351 -48 m
945 -48 L
(N) *
-351 92 m
945 92 L
(N) *
-351 45.125 m
945 45.125 L
(N) *
0 O
0.8 0.7 0 0 k
-84.1129 24.5622 m
-78.3426 35.2271 -72.4289 44.6989 -65.7218 55.1398 c
-61.2118 62.1605 -53.3882 72.0563 -50.9643 76.9002 c
-50.6664 77.4955 -51.5153 78.0275 -51.3748 78.4846 c
-51.1043 79.3649 -50.7124 80.0024 -51.2461 81.1631 c
-52.4435 83.7674 -53.5185 84.4124 -55.3495 85.9233 c
-55.0791 85.7002 -58.0193 84.7311 -57.3151 85.3981 c
-61.0942 81.2315 l
-64.0786 77.0374 l
-66.0861 75.0131 l
-68.0079 71.1353 l
-68.9611 69.7697 l
-71.2571 67.0665 l
-73.0859 63.4416 l
-73.5315 62.6274 -74.1581 61.8378 -75.0354 60.0576 c
-77.8705 56.499 l
-78.1761 55.9216 -78.6831 54.9635 v
-78.9369 54.4842 -79.3251 53.9476 -79.5824 53.2644 c
-79.7686 52.7701 -81.1016 51.8888 -81.203 50.632 c
-81.253 50.013 -82.4775 47.6189 -82.9028 46.7509 c
-83.2578 46.0267 -84.555 43.9795 -85.4985 42.2434 c
-86.4564 40.4805 -85.3205 42.8148 -86.2661 41.0839 c
-87.5651 38.7058 -88.3379 36.7115 -88.4 36.5898 c
-95.2905 23.9297 -96.08 22.3837 v
-99.0977 16.4736 -109.8758 -5.3771 -114.0692 -20.8989 c
-114.0992 -21.0097 -114.792 -20.9358 -115.2224 -20.9358 C
-110.7647 39.5828 -108.5389 100.2724 -110.9225 160.9511 C
-110.6351 160.9511 -110.3498 160.9665 -110.0631 160.9434 c
-70.1754 157.7332 -30.7079 156.6504 9.0413 157.673 c
44.3626 158.5817 79.4634 162.9757 114.8237 162.6711 C
114.8237 162.1336 114.6087 161.7036 114.3937 161.6499 c
113.0456 161.3128 108.2489 159.1978 102.2126 156.3025 C
99.4193 154.9627 97.9944 154.2542 99.5246 155.0014 C
98.5379 154.5195 96.8839 153.3773 95.861 152.8685 C
94.3933 152.1384 93.1119 151.8144 91.6112 151.0475 C
90.1159 150.2834 89.8815 149.9464 88.6211 149.2898 C
88.0782 149.0069 87.7519 149.3684 87.2134 149.0846 C
86.5866 148.7543 86.1785 148.2088 85.5611 147.8788 C
85.1922 147.6817 79.9405 144.4923 79.574 144.295 C
78.2537 143.7135 80.731 144.754 79.2513 143.9281 C
78.0131 143.2369 78.3143 144.0584 77.1599 143.3893 C
76.2933 142.8871 75.2394 141.7479 74.4346 141.265 C
73.6323 140.7834 74.1538 141.3879 73.4255 140.9311 C
71.3748 139.6454 70.2595 138.9403 69.6995 138.5496 C
68.4524 137.8046 68.7939 138.1236 64.6287 135.7284 C
63.419 134.8987 57.6707 131.0667 56.0435 129.8969 C
54.8191 129.0938 58.7879 131.4154 57.9021 130.7783 C
56.3447 129.9916 55.3701 129.2401 53.9757 128.2777 C
53.159 127.7141 50.4008 125.437 49.5681 124.8895 C
47.4607 123.5037 45.7225 122.1789 43.4449 120.9618 C
42.3677 122.4064 39.9797 125.1122 38.6668 126.2904 c
41.585 123.6715 30.5689 132.2716 26.7489 134.3828 c
23.0691 136.4166 35.3778 128.4887 35.3888 128.825 c
33.8562 129.0791 29.4227 132.6681 v
30.8705 131.4961 30.5427 131.9932 27.7906 133.7221 c
27.2212 134.0798 21.2224 136.7102 20.6156 137.0057 c
19.3533 137.6205 19.7825 137.1147 18.4689 137.6419 c
17.6931 137.9532 17.7694 138.0349 16.9789 138.3177 c
16.361 138.5387 19.3938 137.2462 18.7682 137.4506 c
18.3206 137.5968 13.1384 139.8228 11.61 140.2573 c
18.8472 138.2001 15.8666 138.8699 6.2984 141.3602 c
3.865 141.9936 -3.9106 142.6873 -4.985 142.9172 c
-5.7414 143.0791 -5.2093 142.372 -5.9678 142.5164 c
-6.9513 142.7038 -5.7859 142.232 -6.7695 142.3923 c
-7.9051 142.5773 -7.7495 142.7451 -8.8796 142.8977 c
-9.4722 142.9777 -8.7736 143.0535 -9.3634 143.1253 c
-10.432 143.2555 -7.5085 142.3465 -8.564 142.4525 c
-9.917 142.5884 -9.7258 142.4672 -10.5309 142.5327 c
-11.2434 142.5907 -9.6477 142.4621 -10.4842 142.556 c
-12.4947 142.7819 -12.5292 142.1913 -15.466 142.2145 c
-16.4966 142.2226 -17.6554 142.2251 -18.2591 142.2266 c
-19.4467 142.2294 -23.6168 141.7975 -24.7073 141.7918 c
-25.8807 141.7855 -25.5386 141.2756 -26.4983 141.2614 c
-29.4928 141.2176 -30.965 141.0166 -29.492 141.3445 c
-32.1123 140.7611 -31.4396 140.8492 -34.838 139.7816 c
-35.8888 139.4515 -39.9737 138.8065 -41.6969 138.3878 c
-36.2496 139.7114 -45.9936 136.8715 -46.4692 136.8125 c
-47.462 136.6894 -50.1138 135.3947 -51.0815 135.1163 c
-53.1192 134.53 -53.3035 134.5066 -53.9777 134.151 c
-55.3171 133.4446 -55.3217 133.431 -56.8989 132.8396 c
-57.6179 132.5699 -58.7747 132.0954 -59.5147 131.8539 c
-60.5783 131.5069 -61.8301 130.6463 -62.8461 130.1676 c
-64.2711 129.4963 -63.4083 129.7766 -65.0796 129.0436 c
-65.9114 128.6787 -67.2631 128.4404 -68.4437 127.7904 c
-69.0676 127.4469 -69.6878 126.8991 -70.3059 126.5866 c
-70.7692 126.3525 -72.1577 125.4464 -72.6193 125.2395 c
-74.2221 124.5207 -74.5067 124.057 -75.864 123.3015 C
-78.5971 121.7802 -80.8363 119.6724 -83.8937 117.509 C
-83.833 116.0169 -84.048 115.8019 -82.973 114.9419 c
-82.3677 114.4576 -81.253 114.5119 -78.3639 115.3951 C
-59.5384 125.9067 -39.134 131.28 -18.0329 132.3499 c
0.4951 133.2894 21.3546 129.2285 33.1251 113.6519 C
24.7302 106.8392 16.5847 100.7892 8.3729 93.8421 c
7.756 93.3203 6.925 92.152 6.3099 91.6271 c
5.8316 91.219 4.6727 90.7802 3.8053 90.0332 c
3.3816 89.6682 3.6032 89.3024 3.1804 88.9357 c
2.2997 88.172 0.958 87.6755 -0.1004 86.6328 c
-0.8649 85.8795 -1.2189 85.5277 -2.2038 84.6438 c
-2.6198 84.2704 -3.2503 83.251 -3.6652 82.8754 c
-4.454 82.1614 -5.2408 81.4432 -6.0256 80.7205 c
-6.4623 80.3184 -7.5433 79.6999 -7.9786 79.2949 c
-9.1631 78.1931 -9.4827 78.1556 -10.657 77.031 c
-10.9842 76.7178 -12.0489 76.0692 -12.5 75.5949 c
-13.4111 74.637 -14.3515 73.39 -15.1144 72.8769 c
-16.5597 71.9048 -16.6451 71.4466 -17.7879 70.4143 c
-18.506 69.7657 -18.7751 69.5678 -19.5326 69.0553 c
-20.0005 68.7388 -20.4086 68.3843 -20.6739 67.9129 c
-20.9984 67.3363 -22.1477 67.3034 -22.5812 66.8073 c
-24.5145 64.5949 -27.4401 61.7471 -29.3076 59.7246 c
-29.6831 59.318 -30.0491 59.3525 -30.4038 58.9735 c
-31.1794 58.145 -31.4436 57.6687 -32.7716 56.3542 c
-33.2329 55.8975 -34.2775 55.2808 -34.626 54.9267 c
-35.9295 53.6022 -35.8723 53.1588 -36.2959 52.7821 c
-37.0137 52.1439 -37.974 51.5179 -38.7621 50.9106 c
-39.6458 50.2297 -40.3304 49.0901 -41.0244 48.2079 c
-41.7185 47.3256 -42.3592 47.3952 -43.3437 46.1893 c
-44.5308 44.735 -45.3027 43.8365 -45.9596 43.0721 c
-46.4967 42.4471 -46.9795 42.2172 -47.4901 41.5849 c
-47.871 41.1131 -48.1986 40.5674 -48.7135 40.2416 c
-51.1043 38.7282 -51.6805 37.6491 -53.3932 35.9121 c
-53.7698 35.5302 -54.7362 35.6259 -55.7862 34.0994 c
-56.549 32.9904 -59.5161 29.6553 -60.2897 28.8274 c
-60.9197 28.1534 -59.2536 29.5917 -60.8296 27.8695 c
-61.8225 26.7846 -61.949 26.5554 -62.9338 25.4632 c
-63.4155 24.9291 -64.5418 24.1793 -65.0232 23.644 c
-65.8625 22.7107 -66.3523 22.0573 -67.1149 21.0554 c
-67.4932 20.5585 -67.7288 21.3806 -69.5705 18.3631 c
-70.4158 16.9781 -71.1687 15.7907 -73.3089 14.3336 c
-74.3927 13.5958 -73.9637 12.1358 -75.3775 11.4607 c
-77.2009 10.5901 -76.4189 11.2548 -76.6393 10.5798 c
-76.5398 10.8846 -80.4136 7.4059 -81.2619 4.6564 C
-81.8232 4.0102 -83.0649 2.6673 -83.694 1.9176 C
-84.2478 1.2577 -84.8266 0.9876 -85.4287 0.2473 C
-86.208 -0.7111 -86.5867 -1.9212 -87.4124 -2.9378 C
-88.046 -3.7178 -88.2597 -3.8655 -88.9078 -4.6637 C
-89.6741 -5.6075 -90.8766 -6.5592 -91.6462 -7.507 C
-92.3924 -8.4261 -93.1358 -9.9868 -93.868 -10.8884 C
-95.3513 -12.7149 -96.3027 -12.9809 -98.11 -15.9207 C
-100.8881 -19.3761 -103.1538 -22.2406 -104.2576 -23.7307 C
-104.6876 -23.0858 -104.9026 -22.8708 Y
-98.2377 -4.5961 -86.9728 18.8911 -84.1129 24.5622 C
f
1 g
0.43 w
-29.2295 109.7654 m
-29.8714 109.988 -30.6278 110.097 -31.3584 110.2752 c
-32.5599 110.5685 -33.6459 110.6117 -34.6366 110.4589 C
-39.7413 109.6717 -42.3164 103.6821 -45.1336 99.8922 C
-44.6266 99.3017 -44.0491 98.8696 -43.4288 98.56 c
-42.6707 98.1816 -42.2009 98.6982 -41.4426 98.338 c
-40.1887 97.7422 -38.4687 97.3122 -37.4322 98.1095 c
-36.9309 98.4952 -35.3376 98.0589 -34.7785 98.2342 c
-32.3361 99.0001 -33.0987 99.8426 -30.2051 101.0554 c
-28.3639 101.8271 -27.0739 104.6221 -27.633 108.0398 c
-27.7954 109.0325 -28.4271 109.4871 -29.2295 109.7654 c
f
0.8 0.7 0 0 k
1 w
37.425 106.342 m
44.1508 93.4124 39.5301 77.8982 31.2938 65.9997 c
22.3395 53.0638 9.0185 47.2341 -3.8543 40.5532 C
-6.257 27.0276 -3.2971 13.4338 1.0927 0.637 c
7.7555 -18.7858 18.6746 -34.091 36.0409 -46.0125 c
36.3233 -46.2064 36.135 -47.0219 36.135 -47.5953 C
-10.5064 -43.7788 -56.8497 -42.613 -104.0518 -47.9443 c
-104.3292 -47.9757 -104.6713 -47.5526 -104.4347 -47.1901 c
-91.8955 -27.983 -80.1445 -11.2502 -65.3637 5.7416 c
-33.0774 42.8574 -0.8611 77.1592 37.425 106.342 C
f
80.5157 56.4401 m
86.2291 75.5976 90.0991 92.3673 96.4223 109.319 C
102.1389 124.4017 115.3074 151.8138 118.1023 156.5437 c
118.2224 156.7469 117.4806 157.5946 117.8336 157.0812 C
92.3911 146.9837 69.1934 131.8505 47.7448 114.9419 C
48.8008 113.3763 49.8996 111.7354 50.6356 110.0384 c
51.024 109.1431 52.0361 106.627 51.6808 107.3082 c
51.3997 107.847 52.3263 106.0865 52.5836 105.0255 c
52.7553 104.3179 53.1233 102.745 53.2591 102.0279 c
53.4736 100.8955 54.0753 99.1077 54.21 97.959 c
54.3861 96.459 54.7756 95.3654 54.5622 93.8696 c
54.1947 91.2923 54.6387 91.6638 54.6209 89.7896 c
54.6057 88.1902 54.3793 90.0148 54.3253 88.7158 c
54.2893 87.8497 54.3793 85.2244 54.054 84.4359 c
53.6472 83.4498 54.3891 83.7296 53.0958 80.9826 c
52.3801 79.4623 52.3646 79.3178 51.8449 77.9567 c
51.5694 77.2351 51.5019 76.4755 51.2153 75.6787 c
50.7714 74.4446 49.373 71.9412 49.3296 71.4755 c
49.2292 70.3998 49.2292 71.0448 47.5748 68.5034 c
46.4313 66.7468 45.3593 65.0249 43.5156 63.2497 c
43.0043 62.7575 43.0234 61.9598 42.5538 61.4359 C
42.5538 61.4359 L
41.7709 60.5623 40.6294 60.08 39.0842 58.0273 C
38.5858 57.5211 38.5119 56.5936 38.0026 56.1044 C
36.8988 55.0439 36.2001 55.0975 35.0485 54.1115 C
33.9261 53.1505 33.1045 52.3401 31.3585 50.2876 C
29.5119 48.8389 26.828 47.8435 25.504 46.9273 C
25.2105 46.5393 24.3589 45.9192 22.8031 44.999 C
22.1888 44.6356 21.4646 44.2254 20.6216 43.7642 C
20.1254 43.4928 19.5881 42.7737 19.0078 42.4661 C
16.1198 41.3753 12.9173 39.754 8.4005 37.5432 C
8.327 36.6792 8.2685 35.8188 8.2249 34.9611 c
8.1772 34.0261 7.9321 33.0945 7.9192 32.1653 c
7.9112 31.5923 7.9098 30.8051 7.9148 30.2338 c
7.9224 29.3725 8.1597 28.7277 8.1964 27.8689 c
8.2301 27.0781 8.2761 25.6432 8.334 24.8535 c
8.4599 23.1386 8.8624 21.2024 9.0992 19.4835 c
9.1586 19.0526 8.7914 19.0514 8.8576 18.6198 c
9.1061 16.9984 9.6315 16.3974 9.898 15.1361 c
10.0519 14.4081 9.8328 13.4601 10.1631 11.9688 c
10.3254 11.2364 10.4952 10.9387 10.6725 10.2156 c
11.0101 8.8384 11.3747 7.0478 11.7661 5.7024 c
11.9314 5.1341 12.1014 4.5685 12.2762 4.0055 c
12.4983 3.2897 12.9432 3.2231 13.1806 2.5155 c
13.6219 1.2001 13.6593 0.5433 14.1524 -0.7461 c
14.6476 -2.0407 15.2804 -3.5211 15.9301 -5.8841 c
16.0748 -6.4102 16.7951 -6.67 17.0185 -7.1679 c
17.8696 -9.0651 18.2903 -11.046 19.9565 -13.2236 c
20.2516 -13.6093 19.9729 -14.2951 20.1953 -14.7166 c
20.4968 -15.288 20.7981 -15.207 21.1021 -15.7668 c
22.1531 -17.7014 22.5925 -18.7258 23.8349 -20.6928 c
24.1209 -21.1455 24.7402 -23.0858 25.345 -23.327 c
26.0144 -23.594 26.1401 -24.094 26.5453 -24.6804 c
27.1945 -25.6203 28.2121 -27.677 28.9661 -28.5163 c
31.3399 -31.1587 33.2137 -34.1879 37.7195 -38.05 c
38.3687 -38.6065 38.9873 -39.2071 39.6429 -39.7775 c
40.607 -40.6163 42.2609 -42.0396 42.646 -41.3649 c
60.246 -10.5267 70.7973 22.5785 80.5157 56.4401 c
F
144 698 m
144 -598 L
(N) *
77 698 m
77 -598 L
(N) *
0 To
1 0 0 1 -103.6357 310.9614 0 Tp
TP
0 Tr
0 O
0 g
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_IllustratorA_AI3 /terminate get exec
Adobe_typography_AI3 /terminate get exec
Adobe_customcolor /terminate get exec
Adobe_cshow /terminate get exec
Adobe_cmykcolor /terminate get exec
Adobe_packedarray /terminate get exec
%%EOF

