\section{Tree Automata Completion}
\label{section:completion}

Given a tree automaton $\A$ and a TRS $\R$, the tree automata completion
algorithm, proposed in~\cite{Genet-RTA98,FeuilladeGVTT-JAR04}, computes a tree
automaton $\aaex^*$ such that $\Lang(\aaex^*)=\desc(\Lang(\A))$ when it is
possible (for some of the classes of TRSs where an exact computation is
possible, see~\cite{FeuilladeGVTT-JAR04}) and such that $\Lang(\aaex^*)
\supseteq \desc(\Lang(\A))$ otherwise.

The tree automata completion works as follows. From $\A=\aaex^0$ completion
builds a sequence $\aaex^0.\aaex^1\ldots\aaex^k$ of automata such that if
$s\in\Lang(\aaex^i)$ and $s\f_{\R} t$ then $t\in\Lang(\aaex^{i+1})$. If we find
a fixpoint automaton $\aaex^k$ such that $\desc(\Lang(\aaex^k)) =
\Lang(\aaex^k)$, then we note $\aaex^*=\aaex^k$ and we have
$\Lang(\aaex^*)=\desc(\Lang(\aaex^0))$, or $\Lang(\aaex^*)\supseteq
\desc(\Lang(\A))$ if $\R$ is not in one class of~\cite{FeuilladeGVTT-JAR04}. To
build $\aaex^{i+1}$ from $\aaex^{i}$, we achieve a \textit{completion step}
which consists of finding \textit{critical pairs} between $\f_{\R}$ and
$\f_{\aaex^i}$. To define the notion of critical pair, we extend the definition
of substitutions to terms of $\TFQ$. For a substitution $\sigma:\X\mapsto\Q$ and
a rule $l\f r \in \R$, a critical pair is an instance $l\sigma $ of $l$ such
that there exists $q\in\Q$ satisfying $l\sigma \f^*_{\aaex^i}q$ and $l\sigma
\f_{\R} r\sigma$. Note that since $\R$, $\aaex^i$ and the set $\Q$ of states of
$\aaex^i$ are finite, there is only a finite number of critical pairs.  For
every critical pair detected between $\R$ and $\aaex^i$ such that $r\sigma
\not\f^*_{\aaex^i}q$, the tree automaton $\aaex^{i+1}$ is constructed by adding
a new transition $r\sigma \f q$ to $\aaex^i$ such that $\aaex^{i+1}$ recognizes
$r\sigma$ in $q$, i.e. $r\sigma \f^*_{\aaex^{i+1}} q$.

{\small
$$
\xymatrix{
  l\sigma \ar[r]_{\R}\ar[d]^{*}_{\aaex^i} & r\sigma \ar@/^1.2pc/[ld]_{*}^{\aaex^{i+1}}\\
  q & %\ar[l]^{\A_{i+1}} q'
}
$$}


However, the transition $r \sigma \f q$ is not necessarily a normalized
transition of the form $f(q_1, \ldots, q_n) \f q$ and so it has to be normalized
first. Thus, instead of adding $r\sigma \rw q$ we add $\norm(r\sigma \rw q)$ to
transitions of $\aaex^i$.
Here is the $\norm$ function used to normalize transition. Note that, in 
this function, transitions are normalized using either new states of $\Q_{new}$
or states of $\Q$, states of the automaton being completed. As mentioned in
Lemma~\ref{lemma:approx}, this has no effect on the safety of the normalization
but only on its precision.

 \begin{definition} [$\norm$] Let $\A=\aut$ be a tree automaton, $\Q_{new}$ a
   set of {\em new} states such that $\Q\cap \Q_{new} = \emptyset$, $t \in \TFQ$ and $q\in
   \Q$.  The function $\norm$ is inductively defined by:
  \begin{itemize}
    \item 
    $\norm(t \rw q)= \emptyset$ is $t=q$,
    \item 
    $\norm(t \rw q)= \{c \rw q \sep c\rw t \in \Delta\}$ if $t \in \Q$,
    \item 
    $\norm(f(t_1, \ldots, t_n) \rw q)= \bigcup_{i =1 \ldots n} \norm(t_i \rw
    q_i) \cup \{f(q_1, \ldots, q_n) \rw q\}$ where $\forall i=1\ldots n: (t_i
    \in \Q \Rightarrow q_i=t_i) \wedge (t_i \in \TFQ\setminus \Q \Rightarrow q_i \in \Q\cup \Q_{new})$.
  \end{itemize}
\end{definition}

When using only new states to normalize all the new transitions occuring in all
the completion steps, completion is as precise as possible.  However, doing so,
completion is likely not to terminate (because of general undecidability
results~\cite{GilleronTison-FI95}).  Enforcing termination of completion can be
easily done by bounding the set of new states to be used with $\norm$ during the
whole completion. We then obtain a finite tree automaton over-approximating the
set of reachable states. The fact that normalizing with any set of states (new
or not) is {\em safe} is guaranteed by the following simple lemma. For the
general safety theorem of completion see~\cite{FeuilladeGVTT-JAR04}.

\begin{lemma}
\label{lemma:approx}
For all tree automaton $\A=\aut$, $t\in \TFQ\setminus \Q$ and $q\in\Q$, if $\Pi=\norm(t \rw
q)$ whatever the states chosen in $\norm(t \rw q)$ we have $t \rw^*_{\Pi} q$.
\end{lemma}
\begin{proof}
This can be done by a simple induction on transitions to normalize, see~\cite{FeuilladeGVTT-JAR04}.
\end{proof}

To let the user of completion guide the approximation, we use two different
tools: a set $\nr$ of {\em normalization rules} (see~\cite{FeuilladeGVTT-JAR04})
and a set $\E$ of {\em approximation equations}. 
% On the one side, normalization
% rules define which states are to be used to normalize a transition with
% $\norm$. When using $\nr$ to guide the normalization, we note $\norm_{\nr}$ the
% normalization function.  On the other side, approximation equations define some
% approximated equivalence classes. Equations of $\E$ are applied directly on
% $\A^{i+1}_{\R}$ to merge together the states whose recognized terms are in the
% same equivalence class w.r.t. $\E$.
%
% For all $s,l_1, \ldots, l_n \in\TFQX$ and for all
% $x,x_1, \ldots, x_n \in \Q\cup\X$, the general form for a normalization rule
% is:
% \[[s \rw x] \rw [l_1 \rw x_1, \ldots, l_n \rw x_n]\] where the expression $[s
% \rw x]$ is a pattern to be matched with the new transitions $t \rw q'$ obtained
% by completion. The expression $ [l_1 \rw x_1, \ldots, l_n \rw x_n]$ is a set of
% rules used to normalize $t$. To normalize a transition of the form $t \rw q'$,
% we match $s$ with $t$ and $x$ with $q'$, obtain a substitution $\sigma$ from the
% matching and then we normalize $t$ with the rewrite system $\{l_1\sigma \rw
% x_1\sigma, \ldots, l_n \sigma \rw x_n\sigma\}$. Furthermore, if $\forall
% i=1\ldots n: x_i\in \Q$ or $x_i \in \var(l_i) \cup \var(s) \cup \{x\}$ then
% since $\sigma: \X \mapsto \Q$, $x_1 \sigma, \ldots, x_n\sigma$ are necessarily
% states. 
% If a transition cannot be fully normalized using approximation rules
% $\nr$, normalization is finished using some new states, see Example
% \ref{example:approx}. 
% %We denote by $\norm_\nr(t \rw q')$ the set of transitions
% %obtained by the normalization of $t \rw q'$ by normalization rules $\nr$.
An approximation equation is of the form $u=v$ where $u,v\in\TFX$. 
Let $\sigma: \X \mapsto \Q$ be a substitution such that $u\sigma
\rw_{\A_{\R}^{i+1}} q$, $v\sigma \rw_{\A_{\R}^{i+1}} q'$ and $q\neq q'$.
We have 

{\small
$$\xymatrix{
u\sigma \ar@{=}[r]_{\E}\ar[d]_{\aaex^{i+1}}^{*} & v\sigma \ar[d]_{*}^{\aaex^{i+1}}\\
q & q'
}
$$}

and, thus, there exists some terms recognized by $q$ and some recognized by $q'$
which are equivalent modulo $\E$. A correct over-approximation of $\aaex^{i+1}$
consits in applying the $\merge$ function to it, i.e. replace $\aaex^{i+1}$ by
$\merge(\aaex^{i+1},q, q')$, as long as an approximation equation of $\E$
applies. The $\merge$ function is defined below and an example of its
application is given in Example~\ref{example:merge}.
\begin{definition}[$\merge$]
  Let $\A= \langle \F, \Q, \Q_F, \Delta \rangle$ be a tree automaton and
  $q_1,q_2$ be two states of $\A$. We denote by $\merge(\A,q_1, q_2)$ the tree
  automaton where every occurence of $q_2$ is replaced by $q_1$ in $\Q$, $\Q_F$
  and in every left-hand side and right-hand side of every transition of
  $\Delta$.
\end{definition}

%The \coq\ proofs that normalization function $\norm_\nr$ and merge function
%$\merge$ are {\em safe}, i.e. construct valid over-approximation are detailed in
%Section~\ref{}.  
The following examples illustrate completion and how to carry out an
approximation, using equations, when the language $\desc(\Lang(\A)) $ is not
regular.

\begin{example}
%   \label{example:approx}
%   Let $\R=\{g(x,y) \rw g(f(x),f(y))\} $ and let $\A$ be the tree automaton such
%   that $\Q_F=\{q_f\}$ and $\Delta=\{a \rw q_a, g(q_a,q_a)\rw q_f\}$. Hence
%   $\Lang(\A)= \{g(a,a)\}$ and $\desc(\Lang(\A))=\{g(f^n(a),f^n(a))~|~n\geq
%   0\}$. Let $\nr=[g(f(x),f(y)) \rw z] \rw [f(x) \rw q_1, f(y) \rw q_1]$ and $\E$
%   be the empty set. During the first completion step, we find a critical pair
%   $g(q_a, q_a) \rwR g(f(q_a),f(q_a))$ and $g(q_a,q_a)\rw^*_{\A} q_f$. We thus
%   have to add the transition $g(f(q_a),f(q_a)) \rw q_f$ to $\A$. To normalize
%   this transition, we match $g(f(x), f(y))$ with $g(f(q_a),f(q_a))$ and match
%   $z$ with $q_f$ and obtain $\sigma=\{x \mapsto q_a, y \mapsto q_a, z \mapsto
%   q_f\}$. Applying $\sigma$ to $[f(x) \rw q_1, f(y) \rw q_1]$ gives $[f(q_a) \rw
%   q_1, f(q_a) \rw q_1]$. This last system is used to normalize the transition
%   $g(f(q_a),f(q_a)) \rw q_f$ into the set $\norm_\nr(g(f(q_a),f(q_a)) \rw
%   q_f)=\{g(q_1, q_1) \rw q_f, f(q_a)\rw q_1 \}$ which is added to $\A$ to obtain
%   $\aaex^1$. The completion process continues for another step and ends on
%   $\aaex^2$ whose set of transition is $\{a \rw q_a, g(q_a,q_a)\rw q_f, g(q_1,
%   q_1) \rw q_f, f(q_a)\rw q_1, f(q_1)\rw q_1\}$. Since $\aaex^2$ is a fixpoint,
%   we have $\aaex^*=\aaex^2$ and $\Lang(\aaex^*)=\{g(f^n(a),f^m(a))~|~n,m\geq 0\}$
%   which is an over-approximation of $\desc(\Lang(\A))$.
% \end{example}

% \begin{example}
%   \label{example:merge}
%   On the same $\R$ and $\A$ than in the previous example, let $\nr$ be empty and
%   $\E=\{f(x)=x\}$. During the first completion step, we find a critical pair
%   $g(q_a, q_a) \rwR g(f(q_a),f(q_a))$ and $g(q_a,q_a)\rw^*_{\A} q_f$. We thus
%   have to add the transition $g(f(q_a),f(q_a)) \rw q_f$ to $\A$. To normalize
%   this transition, we have to use new states since $\nr$ is empty. Thus,
%   $\norm_\nr(g(f(q_a),f(q_a)) \rw q_f)=\{g(q_1, q_2) \rw q_f, f(q_a)\rw
%   q_1,f(q_a)\rw q_2 \}$ where $q_1$ and $q_2$ are new states, and this set is
%   added to $\A$ to obtain $\aaex^1$. On this tree automaton, we can apply the
%   equation $f(x)=x$ of $\E$. On the left-hand side of the equation, we have
%   $f(q_a) \rw^*_{\aaex^1} q_1$ and on the right-hand side $q_a \rw^*_{\aaex^1}
%   q_a$ hence we can replace $\aaex$ by $\merge(\aaex^1,q_1,q_a)$ where $\Delta$
%   is $\{ a \rw q_1, g(q_1,q_1)\rw q_f, g(q_1, q_2) \rw q_f, f(q_1) \rw q_1,
%   f(q_1) \rw q_2\}$. Similarly, in this last tree automaton, we have $f(q_1)
%   \rw^*_{\aaex^1} q_2$ and $q_1 \rw^*_{\aaex^1} q_1$ hence we can apply
%   $\merge(\aaex^1, q_2, q_1)$. Hence the final value of $\Delta$ of $\aaex^1$
%   approximated by $\E$ is $\{a \rw q_2, g(q_2,q_2)\rw q_f,
%   f(q_2) \rw q_2 \}$. We have $\aaex^*=\aaex^1$ and
%   $\Lang(\aaex^*)=\{g(f^n(a),f^m(a))~|~n,m\geq 0\}$ which is an
%   over-approximation of $\desc(\Lang(\A))$.
% \end{example}

\label{example:merge}
Let $\R=\{g(x,y) \rw g(f(x),f(y))\} $ and let $\A$ be the tree automaton such
that $\Q_F=\{q_f\}$ and $\Delta=\{a \rw q_a, g(q_a,q_a)\rw q_f\}$. Hence
$\Lang(\A)= \{g(a,a)\}$ and $\desc(\Lang(\A))=\{g(f^n(a),f^n(a))~|~n\geq
0\}$. Let $\E=\{f(x)=x\}$ be the set of approximation equations. During the
first completion step on $\aaex^0=\A$,  we find $\sigma=\{x \mapsto q_a\}$ and
the following critical pair

{\small
$$
\xymatrix{
  g(q_a,q_a) \ar[r]_{\R}\ar[d]^{*}_{\aaex^0} & g(f(q_a),f(q_a)) \ar@/^1.2pc/[ld]_{*}^{\aaex^{1}}\\
  q_f & %\ar[l]^{\A_{i+1}} q'
}
$$}

Hence, we have to add the transition $g(f(q_a),f(q_a)) \rw q_f$ to $\aaex^0$ to
obtain $\aaex^1$. This transitions can be normalized in the following way:
$\norm(g(f(q_a),f(q_a)) \rw q_f)=\{g(q_1, q_2) \rw q_f, f(q_a)\rw q_1,f(q_a)\rw
q_2 \}$ where $q_1$ and $q_2$ are new states. Those new states and transitions
are added to $\aaex^0$ to obtain $\aaex^1$. On this tree automaton, we can apply
the equation $f(x)=x$ of $\E$ with the substitution $\sigma=\{x\mapsto q_a\}$:

{\small
$$\xymatrix{
f(q_a) \ar@{=}[r]_{\E}\ar[d]_{\aaex^{1}}^{*} & q_a \ar[d]_{*}^{\aaex^{1}}\\
q_1 & q_a
}
$$}

Hence, we can replace $\aaex$ by
$\merge(\aaex^1,q_1,q_a)$ where $\Delta$ is $\{ a \rw q_1, g(q_1,q_1)\rw q_f,
g(q_1, q_2) \rw q_f, f(q_1) \rw q_1, f(q_1) \rw q_2\}$. Similarly, in this last
tree automaton, we have 

{\small $$\xymatrix{
f(q_1) \ar@{=}[r]_{\E}\ar[d]_{\aaex^{1}}^{*} & q_1 \ar[d]_{*}^{\aaex^{1}}\\
q_2 & q_1
}
$$}

and we can thus apply $\merge(\aaex^1, q_2, q_1)$. Finally, the value of
$\Delta$ for $\aaex^1$ approximated by $\E$ is $\{a \rw q_2, g(q_2,q_2)\rw q_f,
f(q_2) \rw q_2 \}$. Now, the only critical pair that can be found on $\aaex^1$ is
joinable:

{\small
$$
\xymatrix{
  g(q_2,q_2) \ar[r]_{\R}\ar[d]^{*}_{\aaex^1} & g(f(q_2),f(q_2)) \ar@/^1.2pc/[ld]_{*}^{\aaex^{1}}\\
  q_f & %\ar[l]^{\A_{i+1}} q'
}
$$}

Hence, we have $\aaex^*=\aaex^1$ and
$\Lang(\aaex^*)=\{g(f^n(a),f^m(a))~|~n,m\geq 0\}$ which is an over-approximation
of $\desc(\Lang(\A))$.
\end{example}

The tree automata completion algorithm and the approximation mechanism are
implemented in the \timbuk~\cite{timbuk-site} tool. On the previous example, once
the fixpoint automaton $\aaex^*$ has been computed, it is possible to check
whether some terms are reachable, i.e. recognized by $\aaex^*$ or not. This
can be done using tree automata 
intersections~\cite{FeuilladeGVTT-JAR04}. 
% Another way to do
% that is to search instances for a pattern $t$, where $t\in \TFX$, in the tree
% automaton. 
% Given $t$ it is possible to check if there exists
% a substitution $\sigma: \X \mapsto \Q$ and a state $q \in \Q$ such that $t\sigma
% \rw_{\aaex^*}^* q$. If such a solution exists then it proves that there
% exists a term $s\in\TF$, a position $p \in \pos(s)$ and a substitution $\sigma':
% \X \mapsto \TF$ such that $s[t\sigma']_p \in \Lang(\aaex^*) \supseteq
% \desc(\Lang(\A))$, i.e. that $t\sigma'$ occurs as a subterm in the language
% recognized by $\Lang(\aaex^*)$. On the other hand, if there is no solution
% then it proves that no such term is in the over-approximation, hence it is not
% in $\desc(\Lang(\A))$, i.e. it is not reachable.

% In the patterns we use in this paper, '$?x$' denotes variables for which a value
% is wanted and '$\_$' denotes anonymous variables for which no value is needed.
% For instance, the pattern $g(f(\_), g(\_,\_))$ has no solution on 
% $\aaex^{2}$ of example~\ref{example:approx}, meaning that no term
% containing any ground instance of this pattern is reachable by rewriting $g(a,a)$.


%%% Local Variables: 
%%% mode: latex
%%% TeX-master: "main"
%%% End: 
